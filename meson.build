project(
    'package_name',
    'cpp',
    version: run_command('poetry', 'version', '--short', check: true).stdout(),
    default_options: [
        'cpp_std=c++20',
        'b_ndebug=if-release',  # disables asserts in release builds
        'b_lto=true',  # sets -flto
        'werror=true',  # sets -Werror
        'warning_level=3',  # level 3 sets -Wextra and -Wpedantic
    ]
)

# We first compile a common library that contains all regular, C++ code. This
# is then linked against by the extension modules. We also define source and
# installation directories here, as a shorthand.
INST_DIR = 'package_name'
SRC_DIR = 'package_name' / 'cpp'
INCLUDES = include_directories(SRC_DIR)

libcommon = static_library(
    'common',
    [
        SRC_DIR / 'Filename.cpp',

    ],
    include_directories: INCLUDES,
)

# Next we get the extension dependencies.
py = import('python').find_installation()
dependencies = [py.dependency(), dependency('pybind11')]

# Extension as [extension name, subdirectory]. The 'extension name' names the
# eventual module name, and 'subdirectory' gives the source and installation 
# directories (relative to SRC_DIR and INST_DIR).
extensions = [
   #ADD FOLDER NAMES
]

foreach extension : extensions
    rawname = extension[0]
    name = '_' + rawname
    subdir = extension[1]

    message('Going to build extension module ' + subdir / name + '.')

    # Specify a custom target that generates the documentation header for this
    # extension, of the form "<name>_docs.h". It is generated from headers in
    # the relevant source directory - which the command below grabs for us.
    doc_glob = f'import glob; print(*glob.glob("@SRC_DIR@/@subdir@/*.h"))'
    doc_cmd = run_command('python', '-c', doc_glob, check: true)
    doc_input_headers = doc_cmd.stdout().split()
    doc_output_header = custom_target(
        'docs for ' + name,
        output: rawname + '_docs.h',
        input: ['extract_docstrings.py'] + doc_input_headers,
        command: ['python', '@INPUT@', '@OUTPUT@'],
        depend_files: [SRC_DIR / subdir / 'bindings.cpp'],
    )

    # Register extension module to build.
    py.extension_module(
        name,
        [SRC_DIR / subdir / 'bindings.cpp', doc_output_header],
        dependencies: dependencies,
        link_with: libcommon,
        install: true,
        subdir: INST_DIR / subdir,
        include_directories: INCLUDES,
    )
endforeach